#!/usr/bin/env python3
"""
Wrapper to install bundles with JHBuild
"""

import argparse
import os
import re
import sys


# Set bundle profile
bundle_profile = "esl"

# Find relevant directories
topdir = os.path.abspath(os.path.dirname(__file__))
cfgdir = os.path.join(topdir, "rcfiles")
moddir = os.path.join(topdir, "modulesets")

# Find available module sets
modulesets = sorted([item.replace(".modules", "") \
        for item in os.listdir(moddir) if item.endswith(".modules")])

# Find available configurations
configs = [item.replace(".rc", "") \
        for item in os.listdir(cfgdir) if item.endswith(".rc")]
systems = sorted(list(set([item.split("-")[0] for item in configs])))
vendors = sorted(list(set([item.split("-")[1] for item in configs])))
flavors = sorted(list(set([item.split("-")[2] for item in configs])))

# Init command-line options
parser = argparse.ArgumentParser(
        description="Install bundles with JHBuild")
parser.add_argument("packages",
        default=["esl-bundle"], nargs="*",
        help="Packages to install (defaults to all ESL Bundle components)")
parser.add_argument("-c", "--compiler",
        choices=vendors, default="gcc",
        help="Vendor of the compiler to use to build packages")
parser.add_argument("-f", "--flavor",
        choices=flavors, default="serial",
        help="Build flavor to select for the compiler options")
parser.add_argument("-m", "--moduleset",
        choices=modulesets, default="esl",
        help="Module set storing the packages to install")
parser.add_argument("-s", "--system",
        choices=systems, default="generic",
        help="System on which the bundle will be installed")
args = parser.parse_args()

# Check selected options
modname = "%s.modules" % args.moduleset
if not os.path.exists(os.path.join(moddir, modname)):
    parser.error("moduleset file not found: %s" % modname)
cfgname = "%s-%s-%s.rc" % (args.system, args.compiler, args.flavor)
cfgfile = os.path.join(cfgdir, cfgname)
if not os.path.exists(cfgfile):
    parser.error("config file not found: %s" % cfgname)
defname = "%s.jhbuildrc" % bundle_profile
if not os.path.exists(os.path.join(topdir, "bundler", "bundles", defname)):
    parser.error("default specs not found: %s" % defname)

# Run JHBuild
jh_cmd = [os.path.join(topdir, "bundler", "jhbuild.py")]
jh_cfg = ["-f", cfgfile]
jh_mod = ["-m", args.moduleset]
jh_run = ["build"] + args.packages
os.environ["JHBUILD_DEFAULTS"] = bundle_profile
ret = os.system(" ".join(jh_cmd + jh_cfg + jh_mod + jh_run))
sys.exit(ret)
